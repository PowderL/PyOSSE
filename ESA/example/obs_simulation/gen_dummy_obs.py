""" module for generating virtual (dummy) observations along clear scenes 
    of satellite measurments as defined by  configuration file 'menu_flnm'

    Authors: L. Feng, Edinburgh University
    History: v0.9, 2013.01.21
    History: v0.95, 2013.04.23
    

    Notes:
    -----------------------------------------------
    1. Dummy observations generated by sampling fixed vmr profile along satellite orbit. 
    2. Observation scenes have been screened by cloud PDF, and AOD PDF 
    3. Resulting observation file main contains: 
    ---> lon, lat, time # location and 
    ---->obs_ak, obs_pres, obs_apr: averaging kernel, observation retrieval pressure level, and retrieval apriori.
    
    4. procedures
    ---> read in configuration
    ---> create configuration objection (including classes for orbit, cloud, aod, landcover, ak, err, and prior)
    ---> creat vobs for virtual observations
    ---> get orbit (vobs)
    ---> grid orbit (vobs)
    ---> sample cloud PDF (vobs)
    ---> sample AOD PDF (vobs)
    ---> sample landcover (vobs)
    ---> get ak, error 
    ---> get apriori (sample dummy model) (vobs)
    ---> save information on virtual observations (vobs)
    
   """

import  numpy as npy
import ESA.util.time_module as  tm
import ESA.util.otool_obj as oob
import ESA.util.message_m as msm
import ESA.util.otool_menu_m as menu_m
import ESA.instrument.dummy_obs_def as vobs_def_m
import ESA.instrument.dummy_obs_m as vobs_m


import ESA.util.otool_var_io as ovar
import ESA.util.otool_ncfile_io as ncfio


# S1: read in configuration file 

menu_flnm='vob_def.cfg'

if ('.xml' in menu_flnm):
    # #: if the menu is given in xml  file 
    root_menu=menu_m.xml_to_menu(menu_flnm)
else:
    # if the menu is given in format text file 
    root_menu=menu_m.txt_to_menu(menu_flnm)
    
# #c: show definition 
    
root_menu.print_menu()
        

# S2: date 

# #c: start time 
yyyy=root_menu['cfg.yst']
mm=root_menu['cfg.mst']
dd=root_menu['cfg.dst']

doy=tm.day_of_year(yyyy, mm, dd)

# #c: end time 
yend=root_menu['cfg.yend']
mend=root_menu['cfg.mend']
dend=root_menu['cfg.dend']

doy_end=tm.day_of_year(yend, mend, dend)

ndoy=0

if (yyyy==yend):
    # #c: in the same year
    
    ndoy=doy_end-doy+1
else:
    # not in the same year 
    if (npy.mod(yyyy, 4)==0):
        ndoy=366-doy+1
    else:
        ndoy=365-doy+1

    # days from year start  to year start 
    for cur_yyyy in range(yyyy+1, yend):
        if (npy.mod(cur_yyyy,4)==0):
            ndoy=ndoy+366
        else:
            ndoy=ndoy+365
    # final doy
    ndoy=ndoy+doy_end

# S3: create dummy definition (configuration) class


odef=vobs_def_m.vobs_def_cl(yyyy, mm, dd, \
                                root_menu)

# S4: create dummy observation class 

vobs=vobs_m.virtual_obs_cl(root_menu['cfg.vobs_varname_lst'])

# S5 generate and save dummy observation day by day


days_in_year=365
if (npy.mod(yyyy, 4)==0):
    days_in_year=366

viewtype=root_menu['cfg.viewtype']
viewmode=root_menu['cfg.viewmode']
outpath=root_menu['cfg.outpath']

for  idd in range(ndoy):
    
    
    yyyy, mm, dd=tm.doy_to_time_array(doy, yyyy)
    
    
    nobs=vobs.gen_daily_obs(odef, yyyy, mm, dd)
    
    sdate=r'%4.4dD%3.3d' % (yyyy, doy)
    
    if (nobs>0):
        # #c: save to netCDF file
        
        ncflnm=viewtype+'.'+sdate+'.nc'
        ncflnm=outpath+'/'+ncflnm
        
        vobs.save_var_to_netcdf(ncflnm)
    
    doy=doy+1
    if (doy>days_in_year):
        # reach
        yyyy=yyyy+1
        doy=1
        days_in_year=365
        if (npy.mod(yyyy, 4)==0):
            days_in_year=366
    

        
